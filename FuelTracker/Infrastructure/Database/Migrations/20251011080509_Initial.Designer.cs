// <auto-generated />
using System;
using FuelTracker.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FuelTracker.Infrastructure.Database.Migrations
{
    [DbContext(typeof(FuelTrackerDbContext))]
    [Migration("20251011080509_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107");

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("AccountAttentionDescriptionList")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountAttentionIDList")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("AccountAttentionLevelExists")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AccountNotes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<short?>("AccountStatus")
                        .HasColumnType("INTEGER");

                    b.Property<byte?>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("AliasNamesString")
                        .HasColumnType("TEXT");

                    b.Property<string>("AliasNumbersString")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("AllowInterfaceUpdate")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AuthorizedPaymentToProvider")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("BadDebtFlag")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BalanceUpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("BillCareFacilityBadDebt")
                        .HasColumnType("money");

                    b.Property<decimal?>("BillCareFacilityCurrentBalance")
                        .HasColumnType("money");

                    b.Property<decimal?>("BillGuarantorBadDebt")
                        .HasColumnType("money");

                    b.Property<decimal?>("BillGuarantorCurrentBalance")
                        .HasColumnType("money");

                    b.Property<decimal?>("BillPayerCurrentBalance")
                        .HasColumnType("money");

                    b.Property<bool?>("CareGiverStatement")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<long?>("CellPhoneNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChangedByID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ChangedDT")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ClaimProcessingFlag")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("CollectionManagementFlag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("CountrySubdivision")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("CountyCode")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateDT")
                        .HasColumnType("TEXT");

                    b.Property<string>("DOB")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<short?>("DataType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateofBirth")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DefaultClientID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DefaultFinancialClassID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(140)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmployerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmployerName")
                        .HasMaxLength(35)
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("FirstDateofDialysis")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasMaxLength(140)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("GuarantorStatement")
                        .HasColumnType("INTEGER");

                    b.Property<short?>("HoldFlag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<long?>("HomePhoneNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HostSystemID")
                        .HasColumnType("INTEGER");

                    b.Property<short?>("InterfaceUpdateStatus")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LastAccountPaymentAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("LastAccountPaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastInterfaceUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastNotificationDate")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastStatementDate")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastStatementDateCareGiverGuarantor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastStatementPaymentPlanDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LatestAccountRCMNoteID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LatestPrimaryAccountPayerID")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Locked")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LockedByID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MI")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MasterAccountID")
                        .HasColumnType("INTEGER");

                    b.Property<short?>("MultiplePrimaryPayerStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("NursingHomeResidentFlag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OtherPhone")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<long?>("OtherPhoneNumber")
                        .HasColumnType("INTEGER");

                    b.Property<short?>("PatientEmploymentStatusID")
                        .HasColumnType("INTEGER");

                    b.Property<short?>("PatientMaritalStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("PatientNotificationFlag")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("PatientStatementFlag")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("PaymentPlanBadDebt")
                        .HasColumnType("money");

                    b.Property<decimal?>("PaymentPlanBalance")
                        .HasColumnType("money");

                    b.Property<bool?>("PaymentPlanFlag")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("PaymentPlanStatement")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("PerformRequiredFieldCheck")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PrimaryCareProviderID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PrimaryLanguageID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PurgeDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("PurgeFlag")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReleaseofInformationID")
                        .HasColumnType("INTEGER");

                    b.Property<short?>("RequiredDataFlag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SSN")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("SecondaryClaimHold")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("SignatureonFile")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("StateIdentification")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("StatementHold")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Suffix")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Transition")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UBAdmissionSourceID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UBPatientStatusID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<long?>("WorkPhoneNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zip")
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("tblAccount", (string)null);
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.CampaignAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTerminal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecurrenceDays")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TriggerOffsetDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignAction");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.CampaignCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LogicalGroup")
                        .HasColumnType("TEXT");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignCriteria");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.CampaignTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ActionId");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTask");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.CampaignUserAllowedAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("CampaignUserAllowedAction");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.CampaignUserAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleTier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("CampaignUserAssignment");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.CampaignAction", b =>
                {
                    b.HasOne("FuelTracker.Infrastructure.Database.Entities.Campaign", "Campaign")
                        .WithMany("Actions")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.CampaignCriteria", b =>
                {
                    b.HasOne("FuelTracker.Infrastructure.Database.Entities.Campaign", "Campaign")
                        .WithMany("Criteria")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.CampaignTask", b =>
                {
                    b.HasOne("FuelTracker.Infrastructure.Database.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelTracker.Infrastructure.Database.Entities.CampaignAction", "Action")
                        .WithMany("Tasks")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelTracker.Infrastructure.Database.Entities.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FuelTracker.Infrastructure.Database.Entities.Campaign", "Campaign")
                        .WithMany("Tasks")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Action");

                    b.Navigation("AssignedUser");

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.CampaignUserAllowedAction", b =>
                {
                    b.HasOne("FuelTracker.Infrastructure.Database.Entities.CampaignUserAssignment", "Assignment")
                        .WithMany("AllowedActions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.CampaignUserAssignment", b =>
                {
                    b.HasOne("FuelTracker.Infrastructure.Database.Entities.Campaign", "Campaign")
                        .WithMany("UserAssignments")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelTracker.Infrastructure.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.RefreshToken", b =>
                {
                    b.HasOne("FuelTracker.Infrastructure.Database.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.UserRole", b =>
                {
                    b.HasOne("FuelTracker.Infrastructure.Database.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelTracker.Infrastructure.Database.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.Campaign", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Criteria");

                    b.Navigation("Tasks");

                    b.Navigation("UserAssignments");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.CampaignAction", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.CampaignUserAssignment", b =>
                {
                    b.Navigation("AllowedActions");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FuelTracker.Infrastructure.Database.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
