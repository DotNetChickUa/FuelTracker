@page "/vehicles"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject FuelTracker.Infrastructure.Database.FuelTrackerDbContext Db
@inject MudBlazor.IDialogService DialogService
@inject ISnackbar Snackbar
@using FuelTracker.Infrastructure.Database.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using FuelTracker.Components.Dialogs

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <MudContainer MaxWidth="MaxWidth.Medium">
                <MudPaper Class="pa-6 mt-6">
                    <MudStack Spacing="2">
                        <MudText Typo="Typo.h5">My Vehicles</MudText>

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAdd">Add vehicle</MudButton>

                        <MudTable Items="_vehicles" Hover="true" Dense="true">
                            <HeaderContent>
                                <MudTh>Name</MudTh>
                                <MudTh>Make</MudTh>
                                <MudTh>Model</MudTh>
                                <MudTh>Year</MudTh>
                                <MudTh>Fuel</MudTh>
                                <MudTh></MudTh>
                            </HeaderContent>
                            <RowTemplate Context="rowContext">
                                <MudTd>@rowContext.Name</MudTd>
                                <MudTd>@rowContext.Make</MudTd>
                                <MudTd>@rowContext.Model</MudTd>
                                <MudTd>@rowContext.Year?.ToString()</MudTd>
                                <MudTd>@rowContext.FuelType</MudTd>
                                <MudTd>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => Edit(rowContext))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => Delete(rowContext))" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudStack>
                </MudPaper>
            </MudContainer>
        </Authorized>
        <NotAuthorized>
            <MudText>You must be signed in.</MudText>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthTask { get; set; }

    private List<Vehicle> _vehicles = new();
    private Guid _userId;

    protected override async Task OnInitializedAsync()
    {
        var auth = await (AuthTask ?? throw new InvalidOperationException()).ConfigureAwait(false);
        var idStr = auth.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (!Guid.TryParse(idStr, out _userId))
        {
            return;
        }
        await Load();
    }

    private async Task Load()
    {
        _vehicles = await Db.Set<Vehicle>().Where(v => v.UserId == _userId).OrderBy(v => v.Name).ToListAsync();
        StateHasChanged();
    }

    private async Task ShowAdd()
    {
        var parameters = new DialogParameters
        {
            ["UserId"] = _userId,
            ["Vehicle"] = null
        };
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Small
        };

        var dialogRef = await DialogService.ShowAsync<VehicleEditDialog>("Add Vehicle", parameters, options);
        var result = await dialogRef.Result;
        if (!result.Canceled)
        {
            await Load();
        }
    }

    private async Task Edit(Vehicle v)
    {
        var parameters = new DialogParameters
        {
            ["UserId"] = _userId,
            ["Vehicle"] = v
        };
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Small
        };

        var dialogRef = await DialogService.ShowAsync<VehicleEditDialog>("Edit Vehicle", parameters, options);
        var result = await dialogRef.Result;
        if (!result.Canceled)
        {
            await Load();
        }
    }

    private async Task Delete(Vehicle v)
    {
        // Prevent deleting if there are fuel entries
        var hasEntries = await Db.Set<FuelEntry>().AnyAsync(e => e.VehicleId == v.Id && e.UserId == _userId);
        if (hasEntries)
        {
            Snackbar.Add("Delete Fuel Entries first", Severity.Error);
            return;
        }
        Db.Remove(v);
        await Db.SaveChangesAsync();
        await Load();
    }
}
