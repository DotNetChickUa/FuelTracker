@page "/"
        
<PageTitle>Home</PageTitle>


<AuthorizeView>
    <NotAuthorized>
        Fuel Tracker Landing page
    </NotAuthorized>
    <Authorized>
        <MudStack Spacing="2" Class="mt-4">
            <MudText Typo="Typo.h5">Statistics</MudText>
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudText>Select vehicle:</MudText>
                <MudSelect T="Guid" Value="_selectedVehicleId" ValueChanged="OnVehicleChanged" Dense="true" Class="w-25">
                    <MudSelectItem Value="Guid.Empty">All vehicles</MudSelectItem>
                    @foreach (var v in _vehicles)
                    {
                        <MudSelectItem Value="v.Id">@v.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
            @* Canonical stored values *@
            @{
                double distanceKm = _distanceKm;
                double volumeL = _volumeL;
                double totalCost = _totalCost;
                var s = Units.Settings;
                var consL100 = FuelTracker.Application.Units.UnitConverter.ConsumptionLPer100Km(distanceKm, volumeL);
                var consView = FuelTracker.Application.Units.UnitConverter.ConvertConsumption(consL100, s.DistanceUnit, s.VolumeUnit);
                var dpv = FuelTracker.Application.Units.UnitConverter.DistancePerLiter(distanceKm, volumeL);
                var dpvView = FuelTracker.Application.Units.UnitConverter.ConvertDistancePerVolume(dpv, s.DistanceUnit, s.VolumeUnit);
                var cPerKm = FuelTracker.Application.Units.UnitConverter.CostPerKm(totalCost, distanceKm);
                var cPerVol = FuelTracker.Application.Units.UnitConverter.CostPerLiter(totalCost, volumeL);
                var cPerKmView = FuelTracker.Application.Units.UnitConverter.ConvertCostPerDistance(cPerKm, s.DistanceUnit);
                var cPerVolView = FuelTracker.Application.Units.UnitConverter.ConvertCostPerVolume(cPerVol, s.VolumeUnit);
            }
            <MudText>@Units.Settings.CurrencyIsoCode</MudText>
            <MudPaper Class="pa-4">
                <MudStack>
                    <MudText>Consumption: @consView.ToString("0.00") @FuelTracker.Application.Units.UnitConverter.ConsumptionLabel(Units.Settings.DistanceUnit, Units.Settings.VolumeUnit)</MudText>
                    <MudText>Distance per volume: @dpvView.ToString("0.00") @FuelTracker.Application.Units.UnitConverter.DistancePerVolumeLabel(Units.Settings.DistanceUnit, Units.Settings.VolumeUnit)</MudText>
                    <MudText>Cost per distance: @cPerKmView.ToString("0.00") @FuelTracker.Application.Units.UnitConverter.CostPerDistanceLabel(Units.Settings.CurrencyIsoCode, Units.Settings.DistanceUnit)</MudText>
                    <MudText>Cost per volume: @cPerVolView.ToString("0.00") @FuelTracker.Application.Units.UnitConverter.CostPerVolumeLabel(Units.Settings.CurrencyIsoCode, Units.Settings.VolumeUnit)</MudText>
                </MudStack>
            </MudPaper>
            <MudText Typo="Typo.caption">Change units in Settings to see values and labels update. Stored canonical data remains km/L.</MudText>
        </MudStack>

    </Authorized>
</AuthorizeView>

@using FuelTracker.Infrastructure.Database
@using FuelTracker.Infrastructure.Database.Entities
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization

@code {
    [Microsoft.AspNetCore.Components.Inject]
    private FuelTracker.Application.Units.IUnitService Units { get; set; } = default!;
    [Microsoft.AspNetCore.Components.Inject]
    private FuelTracker.Infrastructure.Database.FuelTrackerDbContext Db { get; set; } = default!;
    [CascadingParameter] private Task<AuthenticationState>? AuthTask { get; set; }

    private List<Vehicle> _vehicles = new();
    private Guid _selectedVehicleId = Guid.Empty;
    private Guid _userId;

    private double _distanceKm;
    private double _volumeL;
    private double _totalCost;

    protected override async Task OnInitializedAsync()
    {
        Units.OnChange += StateHasChanged;
        var auth = await (AuthTask ?? throw new InvalidOperationException()).ConfigureAwait(false);
        var idStr = auth.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (Guid.TryParse(idStr, out _userId))
        {
            await LoadVehiclesAndStats();
        }
    }

    private async Task LoadVehiclesAndStats()
    {
        _vehicles = await Db.Set<Vehicle>().Where(v => v.UserId == _userId).OrderBy(v => v.Name).ToListAsync();

        var query = Db.Set<FuelEntry>().Where(e => e.UserId == _userId);
        if (_selectedVehicleId != Guid.Empty)
        {
            query = query.Where(e => e.VehicleId == _selectedVehicleId);
        }
        var entries = await query.OrderBy(e => e.VehicleId).ThenBy(e => e.Date).ToListAsync();
        if (entries.Count > 0)
        {
            // Compute distance as sum of positive differences between consecutive odometer readings per vehicle
            _distanceKm = 0;
            Guid currentVehicle = Guid.Empty;
            double lastOdo = double.NaN;
            foreach (var e in entries)
            {
                if (e.VehicleId != currentVehicle)
                {
                    currentVehicle = e.VehicleId;
                    lastOdo = double.NaN;
                }
                var odo = e.OdometerKm;
                if (!double.IsNaN(lastOdo))
                {
                    var diff = odo - lastOdo;
                    if (diff > 0) _distanceKm += diff;
                }
                lastOdo = odo;
            }
            _volumeL = entries.Sum(e => e.VolumeL);
            _totalCost = entries.Sum(e => (double)e.TotalCost);
        }
        else
        {
            // demo fallback
            _distanceKm = 500;
            _volumeL = 35;
            _totalCost = 70;
        }
        StateHasChanged();
    }

    private async Task OnVehicleChanged(Guid arg)
    {
        await LoadVehiclesAndStats();
    }

    public void Dispose()
    {
        Units.OnChange -= StateHasChanged;
    }
}